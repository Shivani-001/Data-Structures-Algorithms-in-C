//Longest Palindromic Subsequence

#include<std/bitsc++.h>
using namespace std;

 
    int longestPalindromeSubseq(string s)
    {
        int n = s.size();
        int dp[2][n + 1];
        string t = s;
        reverse(t.begin(), t.end());
        
        // points to curent row and prev row
        int index;
        
        for(int i=0; i<= n; i++)
        {
            index = 1 & i;// current index 
            
            for(int j =0; j <= n; j++)
            {
                if(i ==0 || j ==0)
                {
                    dp[index][j] = 0;
                }
                else if(s[i - 1] == t[j -1])
                {
                    dp[index][j] = 1 + dp[1 - index][j-1];
                }
                else{
                    dp[index][j] = max(dp[index][j -1] , dp[1- index][j]);
                }
            }
        }
        return dp[index][n];
    }
int main()
{
    string s;
    cin>>s;
    cout<<"The length of Longest Palindromic Seqeunce : "<<longestPalindromeSubseq(s);
}
